<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-04-14T09:29:13-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Was NVim Worth It?</title><link href="http://localhost:4000/math/2025/04/12/nvim.html" rel="alternate" type="text/html" title="Was NVim Worth It?" /><published>2025-04-12T21:00:00-07:00</published><updated>2025-04-12T21:00:00-07:00</updated><id>http://localhost:4000/math/2025/04/12/nvim</id><content type="html" xml:base="http://localhost:4000/math/2025/04/12/nvim.html"><![CDATA[<p>
Let me tell you about Neovim, the way it was presented to me.
</p>

<p>
Neovim: a modernization of the well-loved Vim. Neovim: a powerful, customizable
editor. Neovim: a necessary addition to anyone's workflow who's seeking to
upgrade their productivity. Neovim: the way.
</p>

<p>
So now you've installed Neovim (you built it from the source for the bleeding
edge of functionality) and can't manage to quit the program. Typing
<code>exit</code> doesn't work, so you smash the keyboard and close the window.
</p>

<p>
Your training arc begins. Soon, getting comfortable with the keybindings, you
spew out code while your mouse lays in a far-flung corner of your desk. You've
now risen to meet the challenge: customization.
</p>

<p>
***
</p>

<p>
Many would argue customization brings out the true power in (N)Vim. I would
argue the same. The first, and in my opinion most important, extension regards
LSPs: Langauge Server Protocols.
</p>

<p>
When VS Code was developing its editor, it ran into the same issue holding back
other small editors' potential: it needed to add syntax support for a vast
array of languages before it could gain widespread acceptance. Sure, they could
go the route of "one language at a time," but this doesn't avoid the eventual
need for extensive development.
</p>

<p>
They brought about LSPs: a way to diffuse production costs among a wide array
of collaborators while allowing smaller editors to enter the picture. Creating
a standard interface protocol, they allowed others to code up "language
servers." These servers could then be used with any editor, incentivizing a
community effort to build up these LSPs. Of course, this means NVim now has
language support too.
</p>

<p>
The second significant feature are snippets. These are essentially keybindings
and abbreviations for otherwise long and redundant pieces of text or code. They
integrate well with LSPs: for the most part, LSPs themselves provide a default
set of snippets. Now, what used to be 3 lines is reduced to 4 characters.
</p>

<p>
So, I came all this way for some snippets and LSPs. Was it truly worth it?
</p>

<p>
For LaTeX, my answer is a resounding "yes"; for things like Markdown files, not
so much. LaTeX is known for its "clunkiness" so to speak: it's difficult to hit
the backslash characters which litter the text, and using less-worn characters
strains one's hands. Snippets have shaved off at least two hours worth of work
here. By contrast, Markdown is essentially English: there isn't much fancy work
to be done.
</p>

<p>
Thus, I'd argue that anybody working in code should at least give it a try;
outside of this, there may not be much scope for practicality.
</p>]]></content><author><name></name></author><category term="math" /><summary type="html"><![CDATA[Let me tell you about Neovim, the way it was presented to me.]]></summary></entry><entry><title type="html">The Olympiad Issue</title><link href="http://localhost:4000/math/2025/02/15/the-olympiad-issue.html" rel="alternate" type="text/html" title="The Olympiad Issue" /><published>2025-02-15T20:00:00-08:00</published><updated>2025-02-15T20:00:00-08:00</updated><id>http://localhost:4000/math/2025/02/15/the-olympiad-issue</id><content type="html" xml:base="http://localhost:4000/math/2025/02/15/the-olympiad-issue.html"><![CDATA[<p>
It's not just an issue because it's a release of a periodical; it's also an
issue in the sense that it's a problem that pervades...well, not much of
society. The issue? Bridging the gap between computational and olympiad math.
</p>

<p>
Contest math is infamously difficult; the handful of insane students make it
nigh impossible to get anywhere, it seems to the untrained eye. You'll be
surprised how far dedication gets you, though, given the abundance of online
resources. Provided the great demand for such materials, you can find much of
it for free.
</p>

<p>
The flavor changes, however, once you get to olympiad math. The math that those
insane students excel at, olympiad math is built on proofs. No longer can
you guess the answer correctly; now only an objectively correct solution can
pass. And, for those aiming to use math as a base for other endeavors (me),
olympiad math is a key step in the journey.
</p>

<p>
As AoPS is to the vast majority of math contestants, OTIS is to these elite
olympiad students. It has the necessary and sufficient material, is widely
accessible thanks to its generous scholarship policies, and is the sole source
of olympiad preparation for most.
</p>

<p>
Between these two mountains, I'm stuck in the valley. The next step in my math
journey is that into the door of olympiad math. OTIS should do the trick, or so
you should think: given the novelty of olympiad math to me, I take more time
and more effort to do what more seasoned contestants breeze through. This is
normal, but with computational math I could fine-tune the level of problems to
fit my liking; the vastness of resources let me do so. It's not the same with
olympiad math. There are fewer contests and problem collections, and even fewer
support resources.
</p>

<p>
Let me take a moment to elaborate on OTIS, for those who may be new to it. It's
a self-paced course, divided into "units." You recieve a unit after completing
the previous, but are given full freedom over the order and choice of units to
complete. Each unit typically has multiple versions and multiple difficulty
levels. Needless to say, I always opt for the lowest.
</p>

<p>
The time structure is significantly different, though, compared to prior math.
In computational math, you could expect to have a difficult problem solved in a
half hour, with easier ones being closer to two minutes. Beyond an hour, a
computational problem is considered too difficult. In olympiad math, though,
you're expected to spend about an hour and a half per problem in contest. If
you prepare with problems of the same difficulty, to do 10 problems you need a
weekend's worth of work.
</p>

<p>
Olympiad's flavor, unique in contest math, lends itself to a solution of a
different flavor. Teamwork has proven itself to be wildly effective. Whereas
you can't really get better at calculations with a team, you <em>can</em> get
better at mathematical creativity.
</p>

<p>
Unlike the past, where the emphasis is on execution of ideas, oly focuses on
generation of ideas. By the time you get to oly math, execution skills are
quite developed. Further fine-tuning isn't necessary or tested. However, the
creative leap is massive, and this is exactly what teamwork can build among
peers.
</p>]]></content><author><name></name></author><category term="math" /><summary type="html"><![CDATA[It's not just an issue because it's a release of a periodical; it's also an issue in the sense that it's a problem that pervades...well, not much of society. The issue? Bridging the gap between computational and olympiad math.]]></summary></entry></feed>